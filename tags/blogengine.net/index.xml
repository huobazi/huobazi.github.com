<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogengine.net on 武眉博</title>
    <link>https://huobazi.github.com/tags/blogengine.net/</link>
    <description>Recent content in Blogengine.net on 武眉博</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 04 Jul 2007 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://huobazi.github.com/tags/blogengine.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>讨论一下类似BlogEngine为何要一次性加载所有Post到内存</title>
      <link>https://huobazi.github.com/blog/2007/07/04/lazyinitializationorearlyinitializationinblogengine/</link>
      <pubDate>Wed, 04 Jul 2007 00:00:00 +0000</pubDate>
      
      <guid>https://huobazi.github.com/blog/2007/07/04/lazyinitializationorearlyinitializationinblogengine/</guid>
      <description>试验了一下给BlogEngine生成10000个post 程序第一次运行时等待的时间让我想自杀（白屏了近2分钟)
看了一下代码，发现BlogEngine在第一次运行时候加载所有Post（从数据库)到List内,类似（Early initialization）
当新添加post时，给数据库（xml/database)内加入该post同时给List内追加该post
删除一个post时候从数据库（xml/database)内删除并从List内remove该post
12privatestring_Content;
3/**////&amp;lt;summary&amp;gt;4///Gets or sets the Content or the post.
5///&amp;lt;/summary&amp;gt;
6publicstringContent
7{
8get9{
10if( _Content ==null)
11{
12_Content =LoadPostContent( this.Id );
13}14return_Content;
15}16set17{
18if( _Content !=value )
19MarkDirty( &#34;Content&#34;);
20_Content =value;
21}22}23privatestringLoadPostContent(Guid id)
24{ 25stringcontent =null;
2627stringkey =string.Format(&#34;Be:Content:{0}&#34;,id);
2829//if there is no content cached30objectobj =HttpContext.Current.Cache.Get(key);
31if(obj ==null)
32{
33//load the post&#39;s content from provider here34content =BlogService.LoadPostContent( id );
3536HttpContext.Current.Cache.Insert(key, content, null, DateTime.Now.AddMinutes(2), TimeSpan.Zero);
3738//if use xml store the data 39//更丑陋点的 new CacheDependency(_Folder + &#34;</description>
    </item>
    
  </channel>
</rss>